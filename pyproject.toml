[project]
name = "kobo-utilities"
version = "2.24.2"
description = "A Calibre plugin providing additional functionality for Kobo eReaders"
readme = "README.md"
license = "GPL-3.0-only"
license-files = ["LICENSE"]
requires-python = "==3.8.5"
# Sources: https://github.com/kovidgoyal/calibre/blob/master/bypy/sources.json
# Calibre 5.13.0 (2021-03-10): PyQt5-5.15.2
# Calibre 6.0.0 (2022-07-11): PyQt6-6.3.1
# Calibre 7.0.0 (2023-11-17): PyQt6-6.5.2
# Calibre 8.0.0 (2025-03-21): PyQt6-6.8.1
dependencies = ["apsw==3.43.0", "pyqt6>=6.7.1"]

[dependency-groups]
dev = ["vulture>=2.14"]

[tool.ruff]
line-length = 88
builtins = ["_", "I", "P", "load_translations", "get_resources", "get_icons"]
exclude = ["calibre-repo", "koboutilities/whitelist.py"]
target-version = "py38"

[tool.ruff.lint]
select = [
    # pyflakes
    "F",
    # pycodestyle
    "E",
    "W",
    # mccabe
    # "C90",
    # pep8-naming
    # "N",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-blind-except
    # "BLE",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-datetimez
    "DTZ",
    # flake8-executable
    "EXE",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-import-conventions
    "ICN",
    # flake8-logging-format
    "G",
    # flake8-no-pep420
    "INP",
    # flake8-pie
    "PIE",
    # flake8-pytest-style
    "PT",
    # flake8-return
    "RET",
    # flake8-self
    # "SLF",
    # flake8-simplify
    "SIM",
    # flake8-type-checking
    "TC",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    # "PTH",
    # flake8-todos
    # "TD",
    # eradicate
    # "ERA",
    # pygrep-hooks
    "PGH",
    # pylint
    "PLE",
    # "PLR",
    # "PLW",
    # tryceratops
    # "TRY",
    # flynt
    "FLY",
    # Perflint
    "PERF",
    # refurb
    "FURB",
    # Ruff-specific rules
    "RUF",
]

ignore = [
    "S101",
    # Disable some rules that conflict with the formatter
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "E501",
    "D206",
    "D300",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "COM812",
    "COM819",
    "ISC001",
    "ISC002",
    # Ignore string formatting issues for now
    "UP030",
    "UP031",
    "UP032",
]

unfixable = [
    # unused-variable: Local variable {name} is assigned to but never used
    # This can be undesirable if the file is saved before adding the code that
    # uses a variable.
    "F841",
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
# https://github.com/microsoft/pyright/blob/main/docs/comments.md
[tool.pyright]
typeCheckingMode = "standard"
include = ["koboutilities/**/*.py", "tests/*.py", "scripts/run"]
exclude = ["**/__pycache__", "koboutilities/whitelist.py"]
extraPaths = ["../calibre/src", "calibre-repo/src"]
ignore = ["../calibre/src", "calibre-repo/src"]
pythonVersion = "3.8"
# reportImportCycles = "warning"
reportUnnecessaryTypeIgnoreComment = "warning"

# Individual strict checks
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
reportMissingTypeStubs = "error"
reportAssertAlwaysTrue = "error"
reportInvalidStringEscapeSequence = "error"
reportInvalidTypeVarUse = "error"
reportSelfClsParameterName = "error"
reportUnsupportedDunderAll = "error"
reportUnusedExpression = "error"
reportWildcardImportFromLibrary = "error"
reportConstantRedefinition = "error"
reportDeprecated = "error"
reportDuplicateImport = "error"
reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInvalidStubStatement = "error"
reportMatchNotExhaustive = "error"
reportMissingParameterType = "error"
reportMissingTypeArgument = "error"
# reportPrivateUsage = "error"
reportTypeCommentUsage = "error"
# reportUnknownArgumentType = "error"
# reportUnknownLambdaType = "error"
# reportUnknownMemberType = "error"
reportUnknownParameterType = "error"
# reportUnknownVariableType = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportUnnecessaryIsInstance = "error"
reportUnusedClass = "error"
reportUnusedImport = "none"              # Already checked by ruff
reportUnusedFunction = "error"
reportUnusedVariable = "error"
reportUntypedBaseClass = "error"
reportUntypedClassDecorator = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedNamedTuple = "error"


[tool.ruff.lint.flake8-import-conventions]
banned-from = ["datetime"]
[tool.ruff.lint.flake8-import-conventions.extend-aliases]
datetime = "dt"

[tool.ty.environment]
extra-paths = ["../calibre/src"]

[tool.pyrefly]
python-version = "3.8.5"
project-includes = [
    "koboutilities/**/*.py",
    "tests/*.py",
    # "scripts/run",
]
project-excludes = ["**/__pycache__", "koboutilities/whitelist.py"]
search-path = ["../calibre/src", "calibre-repo/src"]

[tool.vulture]
paths = ["koboutilities", "tests", "scripts/run"]
