#!/usr/bin/env -S pipx run  # noqa: EXE003
# Author: Jan Larres <jan@majutsushi.net>
# License: MIT/X11
#
# /// script
# requires-python = ">=3.11"
# dependencies = [
#   "babel",
#   "requests",
# ]
# ///
#
# ruff: noqa: S603, S607

from __future__ import annotations

import argparse
import logging
import os
import shutil
import subprocess
import sys
from pathlib import Path
from tempfile import NamedTemporaryFile, TemporaryDirectory
from zipfile import ZIP_DEFLATED, ZipFile

# Ignore until https://github.com/microsoft/pylance-release/discussions/6522 is fixed
import requests  # type: ignore[reportMissingModuleSource]
from babel.messages.mofile import write_mo  # type: ignore[reportMissingModuleSource]
from babel.messages.pofile import read_po  # type: ignore[reportMissingModuleSource]

PLUGIN_NAME = "KoboUtilities"
CALIBRE_MINIMUM_URL = (
    "https://download.calibre-ebook.com/5.13.0/calibre-5.13.0-x86_64.txz"
)
CALIBRE_LATEST_METADATA_URL = (
    "https://api.github.com/repos/kovidgoyal/calibre/releases/latest"
)
CALIBRE_MINIMUM_BIN_PATH = Path.cwd() / "calibre-v5.13.0"
CALIBRE_LATEST_BIN_PATH = Path.cwd() / "calibre-latest"

logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.INFO)
log = logging.getLogger(__name__)


def main(args: argparse.Namespace) -> int:
    if args.verbose:
        log.setLevel(logging.DEBUG)

    if args.command == "build":
        build()
    elif args.command == "test":
        plugin_zip = build()
        return 1 if run_tests(plugin_zip) else 0
    elif args.command == "update-calibre":
        update_calibre()
    elif args.command == "install":
        plugin_zip = build()
        run_calibre(["calibre-debug", "--shutdown-running-calibre"])
        run_calibre(["calibre-customize", "--add-plugin", plugin_zip])
    elif args.command == "install-and-debug":
        plugin_zip = build()
        run_calibre(["calibre-debug", "--shutdown-running-calibre"])
        run_calibre(["calibre-customize", "--add-plugin", plugin_zip])
        run_calibre(["calibre-debug", "--gui"])
    else:
        log.error("Unknown command: %s", args.command)
        return 1

    return 0


def build() -> Path:
    try:
        version = subprocess.check_output(
            ["git", "describe", "--tags", "--dirty"], text=True
        ).strip()
    except subprocess.CalledProcessError:
        version = "unknown"
    zip_name = f"{PLUGIN_NAME}-{version}.zip"

    msgfmt()

    # Delete old zip files so they don't get updated accidentally
    for path in Path.cwd().glob(f"{PLUGIN_NAME}-*.zip"):
        path.unlink()

    with ZipFile(zip_name, "w", ZIP_DEFLATED) as zip_file:
        zip_file.write("about.md")
        zip_file.write("CHANGELOG.md")
        zip_file.writestr("plugin-import-name-koboutilities.txt", "")
        for f in Path.cwd().glob("koboutilities/**/*.py"):
            zip_file.write(f, arcname=f.relative_to(Path("koboutilities").absolute()))
        for f in Path("images").iterdir():
            zip_file.write(f)
        for f in Path("help").iterdir():
            zip_file.write(f)
        for f in Path("translations").glob("*.mo"):
            zip_file.write(f)

    return Path.cwd() / zip_name


def msgfmt() -> None:
    for po in Path("translations").glob("*.po"):
        with po.open() as f:
            catalog = read_po(f)
        mo = po.parent / f"{po.stem}.mo"
        with mo.open("wb") as f:
            write_mo(f, catalog)


def run_tests(plugin_zip: Path) -> bool:
    failed_tests = False
    for bin_path in [CALIBRE_MINIMUM_BIN_PATH, CALIBRE_LATEST_BIN_PATH]:
        if not bin_path.exists():
            update_calibre()
        failed_tests |= run_tests_(plugin_zip, bin_path)
    return failed_tests


def run_tests_(plugin_zip: Path, bin_path: Path) -> bool:
    log.info("Running tests with Calibre %s", bin_path.name)
    with TemporaryDirectory(prefix="calibre.user.") as userdir:
        userdir_path = Path(userdir)
        user_config_path = userdir_path / "config"
        user_config_path.mkdir()
        user_tmp_path = userdir_path / "tmp"
        user_tmp_path.mkdir()

        test_env = {
            "CALIBRE_CONFIG_DIRECTORY": str(user_config_path),
            "CALIBRE_TEMP_DIR": str(user_tmp_path),
            "PYTHONDONTWRITEBYTECODE": "true",
        }

        log.info("Installing plugin %s to %s", plugin_zip, user_config_path)
        subprocess.run(
            [bin_path / "calibre-customize", "-a", plugin_zip],
            check=True,
            env={**os.environ, **test_env},
        )
        subprocess.run(
            [
                bin_path / "calibre-customize",
                "--enable-plugin",
                plugin_zip.stem,
            ],
            check=True,
            env={**os.environ, **test_env},
        )

        # Run tests
        failed_tests = False
        for test in Path("tests").glob("test_*.py"):
            log.info("Running test: %s", test)
            try:
                subprocess.run(
                    [bin_path / "calibre-debug", test],
                    check=True,
                    env={**os.environ, **test_env},
                )
            except subprocess.CalledProcessError:
                failed_tests = True

    return failed_tests


def update_calibre() -> None:
    pkg_suffix = "-x86_64.txz"

    # Download minimum version
    if not CALIBRE_MINIMUM_BIN_PATH.exists():
        download(CALIBRE_MINIMUM_URL, pkg_suffix, CALIBRE_MINIMUM_BIN_PATH)

    # Download latest version
    r = requests.get(CALIBRE_LATEST_METADATA_URL, timeout=20)
    r.raise_for_status()
    release_json = r.json()
    for asset in release_json["assets"]:
        if asset["name"].endswith(pkg_suffix):
            log.info("Found Calibre asset %s", asset["name"])
            download(asset["browser_download_url"], pkg_suffix, CALIBRE_LATEST_BIN_PATH)


def run_calibre(cmd: list[str | Path]) -> None:
    if "CALIBRE_DIRECTORY" in os.environ:
        subprocess.run(
            cmd,
            check=True,
            env={
                **os.environ,
                "PATH": f"{os.getenv('CALIBRE_DIRECTORY')}:{os.getenv('PATH')}",
            },
        )
    else:
        subprocess.run(cmd, check=True)


def download(url: str, pkg_suffix: str, bin_path: Path) -> None:
    log.info("Downloading %s", url)
    shutil.rmtree(bin_path, ignore_errors=True)
    with requests.get(url, stream=True, timeout=60) as r:
        r.raise_for_status()
        with NamedTemporaryFile(suffix=pkg_suffix) as temp_file:
            tar_file = Path(temp_file.name)
            with tar_file.open("wb") as t:
                for chunk in r.iter_content(chunk_size=8192):
                    t.write(chunk)
            shutil.unpack_archive(tar_file, bin_path)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Build and test plugin")
    parser.add_argument(
        "command",
        choices=["build", "test", "update-calibre", "install", "install-and-debug"],
        help="the command to run",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        default=False,
        help="increase output verbosity",
    )
    return parser.parse_args()


if __name__ == "__main__":
    sys.exit(main(parse_args()))
