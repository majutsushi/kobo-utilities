#!/usr/bin/env -S uv run --script --no-config
# Author: Jan Larres <jan@majutsushi.net>
# License: MIT/X11
#
# /// script
# requires-python = ">=3.11"
# dependencies = [
#   "babel",
#   "requests",
#   "tomlkit"
# ]
# ///
#
# Ignore until https://github.com/microsoft/pylance-release/discussions/6522 is fixed
# pyright: reportMissingModuleSource=false, reportMissingImports=false
# ruff: noqa: S603, S607

from __future__ import annotations

import argparse
import logging
import os
import re
import shutil
import subprocess
import sys
import textwrap
from contextlib import suppress
from dataclasses import dataclass
from datetime import datetime as dt
from pathlib import Path
from tempfile import NamedTemporaryFile, TemporaryDirectory
from zipfile import ZIP_DEFLATED, ZipFile

import requests
import tomlkit
from babel.messages.catalog import Catalog
from babel.messages.extract import extract_from_dir
from babel.messages.mofile import write_mo
from babel.messages.pofile import read_po, write_po

PLUGIN_NAME = "KoboUtilities"
CALIBRE_MINIMUM_URL = (
    "https://download.calibre-ebook.com/5.13.0/calibre-5.13.0-x86_64.txz"
)
CALIBRE_LATEST_METADATA_URL = (
    "https://api.github.com/repos/kovidgoyal/calibre/releases/latest"
)
CALIBRE_MINIMUM_BIN_PATH = Path.cwd() / "calibre-v5.13.0"
CALIBRE_LATEST_BIN_PATH = Path.cwd() / "calibre-latest"

logging.basicConfig(format="%(levelname)s: %(message)s", level=logging.INFO)
log = logging.getLogger(__name__)


@dataclass
class Version:
    major: int
    minor: int
    patch: int


class FailedTests(Exception):
    pass


def main(args: argparse.Namespace) -> int:
    if args.verbose:
        log.setLevel(logging.DEBUG)

    args.func(args)
    return 0


def build(args: argparse.Namespace) -> Path:
    del args
    version = get_version()
    zip_name = f"{PLUGIN_NAME}-{version}.zip"

    msgfmt()

    # Delete old zip files so they don't get updated accidentally
    for path in Path.cwd().glob(f"{PLUGIN_NAME}-*.zip"):
        path.unlink()

    with ZipFile(zip_name, "w", ZIP_DEFLATED) as zip_file:
        zip_file.write("about.md")
        zip_file.write("CHANGELOG.md")
        zip_file.writestr("plugin-import-name-koboutilities.txt", "")
        for f in Path.cwd().glob("koboutilities/**/*.py"):
            zip_file.write(f, arcname=f.relative_to(Path("koboutilities").absolute()))
        for f in Path("images").iterdir():
            zip_file.write(f)
        for f in Path("help").iterdir():
            zip_file.write(f)
        for f in Path("translations").glob("*.mo"):
            zip_file.write(f)

    return Path.cwd() / zip_name


def xgettext(args: argparse.Namespace) -> None:
    del args
    version = get_version()
    catalog = Catalog(
        project="kobo-utilities",
        version=version,
        copyright_holder="David Forrester and Jan Larres",
    )

    source_path = Path("koboutilities")
    for filename, lineno, message, comments, context in extract_from_dir(
        source_path, comment_tags=("TRANSLATORS:",), strip_comment_tags=True
    ):
        filepath = str(source_path / filename)
        catalog.add(
            message, None, [(filepath, lineno)], auto_comments=comments, context=context
        )

    with Path("translations/messages.pot").open("wb") as f:
        write_po(f, catalog, width=76)


def msgfmt() -> None:
    for po in Path("translations").glob("*.po"):
        with po.open() as f:
            catalog = read_po(f)
        mo = po.parent / f"{po.stem}.mo"
        with mo.open("wb") as f:
            write_mo(f, catalog)


def test(args: argparse.Namespace) -> None:
    plugin_zip = build(args)
    failed_tests = False
    for bin_path in [CALIBRE_MINIMUM_BIN_PATH, CALIBRE_LATEST_BIN_PATH]:
        if not bin_path.exists():
            update_calibre(args)
        failed_tests |= run_tests(plugin_zip, bin_path)
    if failed_tests:
        raise FailedTests("Some tests failed")


def run_tests(plugin_zip: Path, bin_path: Path) -> bool:
    log.info("Running tests with Calibre %s", bin_path.name)
    with TemporaryDirectory(prefix="calibre.user.") as userdir:
        userdir_path = Path(userdir)
        user_config_path = userdir_path / "config"
        user_config_path.mkdir()
        user_tmp_path = userdir_path / "tmp"
        user_tmp_path.mkdir()

        test_env = {
            "CALIBRE_CONFIG_DIRECTORY": str(user_config_path),
            "CALIBRE_TEMP_DIR": str(user_tmp_path),
            "PYTHONDONTWRITEBYTECODE": "true",
        }

        log.info("Installing plugin %s to %s", plugin_zip, user_config_path)
        subprocess.run(
            [bin_path / "calibre-customize", "-a", plugin_zip],
            check=True,
            env={**os.environ, **test_env},
        )
        subprocess.run(
            [
                bin_path / "calibre-customize",
                "--enable-plugin",
                plugin_zip.stem,
            ],
            check=True,
            env={**os.environ, **test_env},
        )

        # Run tests
        failed_tests = False
        for test in Path("tests").glob("test_*.py"):
            log.info("Running test: %s", test)
            try:
                subprocess.run(
                    [bin_path / "calibre-debug", test],
                    check=True,
                    env={**os.environ, **test_env},
                )
            except subprocess.CalledProcessError:
                failed_tests = True

    return failed_tests


def update_calibre(args: argparse.Namespace) -> None:
    del args
    pkg_suffix = "-x86_64.txz"

    # Download minimum version
    if not CALIBRE_MINIMUM_BIN_PATH.exists():
        download(CALIBRE_MINIMUM_URL, pkg_suffix, CALIBRE_MINIMUM_BIN_PATH)

    if CALIBRE_LATEST_BIN_PATH.exists():
        update_check = textwrap.dedent("""
            import sys
            from calibre.constants import numeric_version
            from calibre.gui2.update import get_newest_version
            sys.exit(int(numeric_version < get_newest_version()))
        """)
        with suppress(subprocess.CalledProcessError):
            subprocess.check_call(
                [CALIBRE_LATEST_BIN_PATH / "calibre-debug", "-c", update_check]
            )
            log.info("%s is up to date", CALIBRE_LATEST_BIN_PATH.name)
            return

    # Download latest version
    r = requests.get(CALIBRE_LATEST_METADATA_URL, timeout=20)
    r.raise_for_status()
    release_json = r.json()
    log.info(
        "Updating %s to %s", CALIBRE_LATEST_BIN_PATH.name, release_json["tag_name"]
    )
    for asset in release_json["assets"]:
        if asset["name"].endswith(pkg_suffix):
            log.info("Found Calibre asset %s", asset["name"])
            download(asset["browser_download_url"], pkg_suffix, CALIBRE_LATEST_BIN_PATH)


def prepare_release(args: argparse.Namespace) -> None:
    toml_path = Path("pyproject.toml")
    toml = tomlkit.parse(toml_path.read_text())
    current_version = Version(*map(int, toml["project"]["version"].split(".")))

    if args.release_type == "major":
        new_version = Version(current_version.major + 1, 0, 0)
    elif args.release_type == "minor":
        new_version = Version(current_version.major, current_version.minor + 1, 0)
    else:
        new_version = Version(
            current_version.major, current_version.minor, current_version.patch + 1
        )
    update_version(new_version)

    # Add changelog header for new release
    version_string = f"{new_version.major}.{new_version.minor}.{new_version.patch}"
    date_string = dt.today().strftime("%Y-%m-%d")  # noqa: DTZ002
    changelog_file = Path("CHANGELOG.md")
    changelog = changelog_file.read_text()
    changelog = changelog.replace(
        "# Changelog",
        textwrap.dedent(
            f"""
            # Changelog

            ## Version {version_string} - {date_string}
        """[1:]
        ),
    )
    changelog_file.write_text(changelog)


def install(args: argparse.Namespace) -> None:
    plugin_zip = build(args)
    run_calibre(["calibre-debug", "--shutdown-running-calibre"])
    run_calibre(["calibre-customize", "--add-plugin", plugin_zip])


def install_and_debug(args: argparse.Namespace) -> None:
    install(args)
    run_calibre(["calibre-debug", "--gui"])


def run_calibre(cmd: list[str | Path]) -> None:
    if "CALIBRE_DIRECTORY" in os.environ:
        subprocess.run(
            cmd,
            check=True,
            env={
                **os.environ,
                "PATH": f"{os.getenv('CALIBRE_DIRECTORY')}:{os.getenv('PATH')}",
            },
        )
    else:
        subprocess.run(cmd, check=True)


def get_version() -> str:
    try:
        version = subprocess.check_output(
            ["git", "describe", "--tags", "--dirty"], text=True
        ).strip()
    except subprocess.CalledProcessError:
        version = "unknown"
    return version


def update_version(version: Version) -> None:
    toml_path = Path("pyproject.toml")
    toml = tomlkit.parse(toml_path.read_text())
    toml["project"]["version"] = f"{version.major}.{version.minor}.{version.patch}"
    toml_path.write_text(tomlkit.dumps(toml))

    init_py_path = Path("koboutilities/__init__.py")
    init_py = init_py_path.read_text()
    init_py = re.sub(
        r"^__version__ = \(\d+, \d+, \d+\)$",
        f"__version__ = ({version.major}, {version.minor}, {version.patch})",
        init_py,
        flags=re.MULTILINE,
    )
    init_py_path.write_text(init_py)


def download(url: str, pkg_suffix: str, bin_path: Path) -> None:
    log.info("Downloading %s", url)
    shutil.rmtree(bin_path, ignore_errors=True)
    with requests.get(url, stream=True, timeout=60) as r:
        r.raise_for_status()
        with NamedTemporaryFile(suffix=pkg_suffix) as temp_file:
            tar_file = Path(temp_file.name)
            with tar_file.open("wb") as t:
                for chunk in r.iter_content(chunk_size=8192):
                    t.write(chunk)
            shutil.unpack_archive(tar_file, bin_path)


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Build and test plugin")
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        default=False,
        help="increase output verbosity",
    )

    subparsers = parser.add_subparsers(
        title="command", help="the command to run", dest="command"
    )
    build_parser = subparsers.add_parser("build")
    build_parser.set_defaults(func=build)
    test_parser = subparsers.add_parser("test")
    test_parser.set_defaults(func=test)
    prepare_release_parser = subparsers.add_parser("prepare-release")
    prepare_release_parser.set_defaults(func=prepare_release)
    prepare_release_parser.add_argument(
        "release_type",
        choices=["major", "minor", "patch"],
        help="the type of release",
    )
    update_calibre_parser = subparsers.add_parser("update-calibre")
    update_calibre_parser.set_defaults(func=update_calibre)
    install_parser = subparsers.add_parser("install")
    install_parser.set_defaults(func=install)
    install_and_debug_parser = subparsers.add_parser("install-and-debug")
    install_and_debug_parser.set_defaults(func=install_and_debug)
    xgettext_parser = subparsers.add_parser("xgettext")
    xgettext_parser.set_defaults(func=xgettext)

    return parser.parse_args()


if __name__ == "__main__":
    sys.exit(main(parse_args()))
